name: Integration and analysis

on:
  push:
    branches:
      - main

jobs:
  integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install tools
        run: |
          dotnet tool install -g dotnet-sonarscanner
          dotnet tool install -g dotnet-reportgenerator-globaltool
          dotnet tool install -g dotnet-stryker

      - name: Configure .env
        run: |
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env

      - name: Start Docker Compose
        run: docker compose -f docker-compose.yml up -d
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}

      - name: Wait for DB
        run: sleep 10

      - name: Sonar Begin
        run: |
          dotnet sonarscanner begin \
            /k:"${{ vars.SONAR_PROJECT_KEY }}" \
            /d:sonar.host.url="${{ vars.SONAR_HOST }}" \
            /d:sonar.token="${{ vars.SONAR_TOKEN }}" \
            /d:sonar.qualitygate.wait=true \
            /d:sonar.qualitygate.timeout=300 \
            /d:sonar.coverageReportPaths="coverage-report/SonarQube.xml" \
            /d:sonar.scanner.scanAll=false  

      - name: Build
        run: dotnet build

      - name: Run Unit Tests
        run: dotnet test --collect:"XPlat Code Coverage" --results-directory TestResults

      - name: Generate Coverage Report (HTML)
        run: |
          reportgenerator \
            -reports:"TestResults/**/coverage.cobertura.xml" \
            -targetdir:"coverage-report" \
            -reporttypes:"Html"

      - name: Generate Coverage Report (SonarQube)
        run: |
          reportgenerator \
            -reports:"TestResults/**/coverage.cobertura.xml" \
            -targetdir:"coverage-report" \
            -reporttypes:"SonarQube"

      - name: Run Mutation Tests
        run: |
          # Excluding MySqlDatabaseClient.cs, Program.cs, and CalculatorEndpoints.cs 
          # because they're infrastructure/startup files or simple endpoint wiring. 
          # The real business logic is already tested via unit tests and E2E coverage.
          dotnet stryker \
            --mutate "**/*.cs" \
            --mutate "!**/MySqlDatabaseClient.cs" \
            --mutate "!**/Program.cs" \
            --mutate "!**/CalculatorEndpoints.cs" \
            --break-at 80
          
          
        

      - name: Sonar End
        run: |
          dotnet sonarscanner end \
            /d:sonar.token="${{ vars.SONAR_TOKEN }}"

      - name: Upload Coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Coverage
          path: coverage-report

      - name: Upload Stryker Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: StrykerReport
          path: StrykerOutput
